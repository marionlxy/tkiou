package com.taikang.tkcoww.module.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.Map;
import java.util.List;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpRequest;
import org.springframework.stereotype.Controller;

import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.udp.common.constant.Globals;
import com.taikang.udp.common.constant.UploadVertor;
import com.taikang.udp.common.util.CommUtil;
import com.taikang.udp.common.util.FileHelper;
import com.taikang.udp.common.util.WebUtil;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.common.datastructre.Dto;

import java.util.HashMap;

import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKStringUtils;

import javax.annotation.Resource;

import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.action.IMenuAction;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import java.util.Arrays;

/**
 * ModuleController
 */
@Controller("moduleController")
@RequestMapping(value = "/module")
public class ModuleController extends BaseController {

	@Resource(name = IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;

	/*
	 * @Resource(name = IMenuAction.ACTION_ID) private IMenuAction menuAction;
	 */
	// /**
	// * 打开主查询页面
	// * @return 页面地址
	// */
	// @RequestMapping("")
	// public String showModuleIndexPage() {
	// return "module/moduleIndex";
	// }
	
	/**
	 * 打开主查询页面-bylixiaoyang
	 * 
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showModuleIndexPage(
			@RequestParam("reqMenuId") String reqMenuId,
			HttpServletRequest request, Model model) {
		if (reqMenuId != null && !reqMenuId.equals("")) {
			model.addAttribute("reqMenuId", reqMenuId);
		}
		return "module/moduleIndex";
	}

	/**
	 * 查询信息列表
	 * 
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String, Object> getModuleList(HttpServletRequest request,
			CurrentPage page) {
		Map<String, Object> map = new HashMap<String, Object>();

		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = moduleAction.queryForPage(page);

		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());

		return map;
	}

	/*
	 * 得到导航菜单信息列表
	 */
	@RequestMapping("/getNavMenuList")
	@ResponseBody
	public Map<String, Object> getNavMenuList(HttpServletRequest request,
			CurrentPage page) {
		Map<String, Object> map = new HashMap<String, Object>();

		Dto paramAsDto = getParamAsDto(request);
		page.setParamObject(paramAsDto);
		CurrentPage currentPage = moduleAction.queryNavMenuForPage(page);

		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * 
	 * @return
	 */
	@RequestMapping("edit")
	public String showModuleEditPage(String rowId, Model model) {

		if (rowId != null && !rowId.equals("")) {
			model.addAttribute("rowId", rowId);
		}

		return "module/moduleEdit";
	}

	/**
	 * 打开选项卡页面
	 * 
	 * @return
	 */
	@RequestMapping("add")
	public String addModulePage(HttpServletRequest request,Model model) {
		Dto paramAsDto = getParamAsDto(request);
		String menuId = paramAsDto.getAsString("menuId");
		if (menuId != null && !menuId.equals("")) {
			 model.addAllAttributes(paramAsDto);
			String mName = CommUtil.convert(paramAsDto.getAsString("menuName"),
					"UTF-8");
			
		}

		return "module/moduleAdd";
	}

	/**
	 * 新增下级栏目
	 * 
	 * @return
	 */
	@RequestMapping("addSubCol")
	public String addSubColPage(HttpServletRequest request) {
		Dto paramAsDto = getParamAsDto(request);
		ModelMap model=new ModelMap();
		String menuId = paramAsDto.getAsString("menuId");
		if (menuId != null && !menuId.equals("")) {
			model.addAttribute(paramAsDto);
			String mName = CommUtil.convert(paramAsDto.getAsString("menuName"),
					"UTF-8");
			model.addAttribute("modParentName", mName);
			model.addAttribute("modParentId", paramAsDto.getAsString("menuId"));
			model.addAttribute("modIsleaf", paramAsDto.getAsString("menuType"));
		}

		return "module/moduleSubCloAdd";
	}

	/**
	 * 保存下级栏目
	 * 
	 * @return
	 */
	@RequestMapping("addFormSub")
	public Map<String, String> addFormSub(HttpServletRequest request,
			HttpServletResponse response, Model model) {
		MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
		Map<String, String> map = new HashMap<String, String>();
		Dto paramAsDto = getParamAsDto(request);
		String menuId = paramAsDto.getAsString("menuId");
		// 获取tomcat目录
		File folder = FileHelper.buildFolder(request);
			
		MultipartFile fmodBanner=multiRequest.getFile("modBanner");
		MultipartFile fmodImg=multiRequest.getFile("modImg");
	
		String bannerFilename = fmodBanner.getOriginalFilename();
		String imgFilename = fmodImg.getOriginalFilename();
		logger.info("开始上传文件:" + bannerFilename+"|"+imgFilename);
		String[] extendes= (Globals.DEFAULT_IMAGE_SUFFIX).split("[|]");
	
		String saveBannerName=FileHelper.generateFileName(folder, FilenameUtils.getExtension(bannerFilename));
		Map<String,Object> mapban=null;
		Map<String,Object> mapimg=null;
		//保存banner到服务器
		try {
			mapban=WebUtil.saveFileToServer(multiRequest, "modBanner", folder.getAbsolutePath(), saveBannerName, extendes);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//保存小图片到服务器
		String saveImgName=FileHelper.generateFileName(folder, FilenameUtils.getExtension(imgFilename));
		
		try {
			 mapimg=WebUtil.saveFileToServer(multiRequest, "modImg", folder.getAbsolutePath(), saveImgName, extendes);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		if(!TKStringUtils.isEmpty(mapban.get("error"))||!TKStringUtils.isEmpty(mapban.get("error"))){
			map.put(MESSAGE_INFO, "新增失败！"+mapban.get("error"));
		}else{
			//获得http服务器路径
			String domainUrl=WebUtil.getURL(request)+""+UploadVertor.FILE_UPLOAD_DIR+UploadVertor.FILE_UPLOAD_SUB_IMG_DIR;
			String bannerUrl=domainUrl+saveBannerName;
			String imgUrl=domainUrl+saveImgName;
			
		}
		logger.info("结束文件上传:" + bannerFilename+"|"+imgFilename);
		
			
		map.put(RTN_RESULT, "true");

		return map;
	}

	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * 
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getModuleById(@RequestParam("rowId") String rowId) {
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		return moduleAction.findOne(param);
	}

	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * 
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	private Map<String, String> saveModuleInfo(HttpServletRequest request) {
		Map<String, String> map = new HashMap<String, String>();

		Dto param = getParamAsDto(request);
		if (param.get("rowId") == null || "".equals(param.get("rowId"))) {
			moduleAction.insertObject(param);
			map.put(MESSAGE_INFO, "新增成功！");
		} else {
			moduleAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");

		return map;
	}

	/**
	 * 判断是否第四级
	 * 
	 * @return
	 */
	@RequestMapping("/isFourLevel")
	@ResponseBody
	private Map<String, String> isFourMenuLevel(HttpServletRequest request) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = getParamAsDto(request);
		Dto dto = moduleAction.findSubOneModule(param);

		/*
		 * String rtn = dto.getAsString("result");
		 * if(!rtn.equalsIgnoreCase("ok")||StringUtils.isEmpty(rtn)) {
		 * map.put(MESSAGE_INFO, "新增成功！"); }
		 */

		map.putAll(dto);
		map.put(RTN_RESULT, "true");

		return map;
	}

	/**
	 * 删除一条或多条记录
	 */
	@RequestMapping(value = "/del")
	@ResponseBody
	public Map<String, String> deleteModule(@RequestParam("rowId") String rowId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		moduleAction.deleteObject(param);

		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");

		return map;
	}
}
