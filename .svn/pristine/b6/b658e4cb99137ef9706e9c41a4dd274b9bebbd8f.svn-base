package com.taikang.tkcoww.module.controller;

import java.io.UnsupportedEncodingException;
import java.util.Map;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpRequest;
import org.springframework.stereotype.Controller;

import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.common.datastructre.Dto;

import java.util.HashMap;

import com.taikang.udp.framework.common.datastructre.impl.BaseDto;

import javax.annotation.Resource;

import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.action.IMenuAction;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Arrays;


/**
  * ModuleController
  */
@Controller("moduleController")
@RequestMapping(value="/module")
public class ModuleController  extends BaseController  {
		
	@Resource(name=IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;
	
	/*@Resource(name = IMenuAction.ACTION_ID)
	private IMenuAction menuAction;*/
//	/**
//	 * 打开主查询页面
//	 * @return 页面地址
//	 */
//	@RequestMapping("")
//	public String showModuleIndexPage() {
//		return "module/moduleIndex"; 
//	}
	
	/**
	 * 打开主查询页面-bylixiaoyang
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showModuleIndexPage(@RequestParam("reqMenuId") String reqMenuId, HttpServletRequest request,Model model) {
		if (reqMenuId != null && !reqMenuId.equals("")) {
			model.addAttribute("reqMenuId", reqMenuId);
		}
		return "module/moduleIndex"; 
	}
	
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getModuleList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = moduleAction.queryForPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}
	
	/*
	 * 得到导航菜单信息列表*/
	@RequestMapping("/getNavMenuList")
	@ResponseBody
	public Map<String,Object> getNavMenuList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		Dto paramAsDto = getParamAsDto(request);
		page.setParamObject(paramAsDto);
		CurrentPage currentPage = moduleAction.queryNavMenuForPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());		
		return map;
	}
	
	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("edit")
	public String showModuleEditPage(String rowId,Model model) {
		
		if(rowId!=null && !rowId.equals(""))
		{
			model.addAttribute("rowId",rowId );
		}
		
		return "module/moduleEdit"; 
	}
	
	/**
	 * 打开选项卡页面
	 * @return
	 */
	@RequestMapping("add")
	public String addModulePage(HttpServletRequest request,Model model) {
		Dto paramAsDto = getParamAsDto(request);
		
		String menuId=paramAsDto.getAsString("menuId");
		if(menuId!=null && !menuId.equals(""))
		{
			model.addAllAttributes(paramAsDto);
			//model.addAttribute("menuName",menuName );
			model.addAllAttributes(paramAsDto);
			byte[] menuName;
			String mName=null;
			try {
				menuName = paramAsDto.getAsString("menuName").getBytes("iso-8859-1");
				mName=new String(menuName,"UTF-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			model.addAttribute("menuName", mName);
		}
		
		return "module/moduleAdd"; 
	}
	
	/**
	 * 打开新增下级栏目
	 * @return
	 */
	@RequestMapping("addSubCol")
	public String addSubColPage(HttpServletRequest request,Model model) {
		
		
		Dto paramAsDto = getParamAsDto(request);
		String menuId=paramAsDto.getAsString("menuId");
		if(menuId!=null && !menuId.equals(""))
		{
			model.addAttribute(paramAsDto);
		}
		
		return "module/moduleSubCloAdd"; 
	}
	
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getModuleById(@RequestParam("rowId")String rowId)
	{
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		return moduleAction.findOne(param);
	}
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveModuleInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("rowId") ==null ||"".equals(param.get("rowId")))
		{
			moduleAction.insertObject(param);
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			moduleAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/isFourLevel")
	@ResponseBody
	private Map<String,String> isFourMenuLevel(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();		
		Dto param = getParamAsDto(request);
		Dto dto=moduleAction.findSubOneModule(param);
		
/*		String rtn = dto.getAsString("result");
		if(!rtn.equalsIgnoreCase("ok")||StringUtils.isEmpty(rtn))
		{
			map.put(MESSAGE_INFO, "新增成功！");
		}*/
	
		map.putAll(dto);
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	*删除一条或多条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteModule(@RequestParam("rowId") String rowId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		moduleAction.deleteObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
}

